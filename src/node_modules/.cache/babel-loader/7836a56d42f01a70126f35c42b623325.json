{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pjcon\\\\dev\\\\simulator\\\\src\\\\src\\\\components\\\\months\\\\March.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { NewEntry } from '../NewEvent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const March = () => {\n  _s();\n\n  const [dates, setDates] = useState([]);\n  const [toggleEntryView, setToggleEntryView] = useState(false);\n  const [entryDate, setEntryDate] = useState(\"\");\n  const [entryDay, setEntryDay] = useState(\"\");\n  useEffect(() => {\n    axios.get(\"/calendar/march\", {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      console.log(response.data);\n      setDates(response.data);\n    }).catch(ex => {\n      const error = ex.response.status === 404 ? \"Resource not found\" : \"An unexpected error has occurred\";\n      console.log(error);\n    });\n  }, []);\n\n  const selectDate = async (date, day) => {\n    setToggleEntryView(true);\n    setEntryDate(date);\n    setEntryDay(day);\n  };\n\n  const buttonClick = {\n    toggleOff: setToggleEntryView,\n    toggle: toggleEntryView,\n    entry_date: entryDate,\n    day_of_week: entryDay\n  };\n  const createCalendar = dates.map(day => {\n    let events;\n\n    if (day.matches.length > 0) {\n      events = day.matches.map(event => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pt-1 pl-1 text-xs md:text-base\",\n          children: event\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this);\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-1/3 text-left m-2 h-32 border-2 border-darkBlue md:w-48\",\n      onClick: () => {\n        selectDate(day.entry_date, day.day_of_week);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pt-1 pl-1 border-b-2 border-darkBlue bg-darkBlue font-semibold text-babyBlue\",\n        children: day.day_of_month\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pt-1 pl-1 text-xs md:text-base\",\n        children: day.restrictions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), events]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-wrap justify-center md:justify-start md:ml-6\",\n    children: [/*#__PURE__*/_jsxDEV(NewEntry, { ...buttonClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), createCalendar]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 7\n  }, this);\n};\n\n_s(March, \"LuvpJIejwRdwItkiNd2LoJywxHs=\");\n\n_c = March;\n\nvar _c;\n\n$RefreshReg$(_c, \"March\");","map":{"version":3,"sources":["C:/Users/pjcon/dev/simulator/src/src/components/months/March.tsx"],"names":["React","useState","useEffect","axios","NewEntry","March","dates","setDates","toggleEntryView","setToggleEntryView","entryDate","setEntryDate","entryDay","setEntryDay","get","headers","then","response","console","log","data","catch","ex","error","status","selectDate","date","day","buttonClick","toggleOff","toggle","entry_date","day_of_week","createCalendar","map","events","matches","length","event","day_of_month","restrictions"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { ICalendar } from '../../tools/interfaces';\r\nimport { NewEntry } from '../NewEvent';\r\n\r\nexport const March = (): JSX.Element => {\r\n\r\n  const [dates, setDates] = useState<ICalendar[]>([])\r\n  const [toggleEntryView, setToggleEntryView] = useState(false)\r\n  const [entryDate, setEntryDate] = useState<string>(\"\")\r\n  const [entryDay, setEntryDay] = useState<string>(\"\")\r\n\r\n  useEffect(() =>  {\r\n      axios\r\n      .get<ICalendar[]>(\"/calendar/march\", {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n      })\r\n      .then(response => {\r\n        console.log(response.data)\r\n        setDates(response.data);\r\n      })\r\n      .catch(ex => {\r\n        const error =\r\n        ex.response.status === 404\r\n          ? \"Resource not found\"\r\n          : \"An unexpected error has occurred\";\r\n          console.log(error)\r\n      });\r\n  }, [])\r\n\r\n  const selectDate = async (date:string, day:string) => {\r\n    setToggleEntryView(true)\r\n    setEntryDate(date)\r\n    setEntryDay(day)\r\n  }\r\n\r\n  const buttonClick = {\r\n    toggleOff: setToggleEntryView,\r\n    toggle: toggleEntryView,\r\n    entry_date: entryDate,\r\n    day_of_week: entryDay\r\n  }\r\n\r\n\r\n  const createCalendar = dates.map(day => {\r\n\r\n    let events;\r\n\r\n    if (day.matches.length > 0){\r\n      events = day.matches.map(event => {\r\n        return (\r\n          <div className=\"pt-1 pl-1 text-xs md:text-base\">{event}</div>\r\n        )\r\n      })\r\n    }\r\n\r\n    return (\r\n      <div className=\"w-1/3 text-left m-2 h-32 border-2 border-darkBlue md:w-48\" onClick={() => {selectDate(day.entry_date, day.day_of_week)}}>\r\n        <div className=\"pt-1 pl-1 border-b-2 border-darkBlue bg-darkBlue font-semibold text-babyBlue\">{day.day_of_month}</div>\r\n        <div className=\"pt-1 pl-1 text-xs md:text-base\">{day.restrictions}</div>\r\n        {events}\r\n      </div>\r\n    ) \r\n  })\r\n\r\n  return (\r\n      <div className=\"flex flex-wrap justify-center md:justify-start md:ml-6\">\r\n      <NewEntry {...buttonClick}/>\r\n      {createCalendar}\r\n      </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}